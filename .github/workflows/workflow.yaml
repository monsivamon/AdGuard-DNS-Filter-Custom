name: Build Filter & modify

on:
  push:
  # 6Hごとに自動実行
  schedule:
    - cron: '0 */6 * * *'

  # 手動実行を許可
  workflow_dispatch:

env:
  NODE_VERSION: 18.x

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      # ビルドで使う最新フィルタを取得（URL直接指定だとconfiguration.json記述が長くなる為）
      - name: Get Latest File
        run: |
          # Adguard 公式フィルタを取得
          curl -sSfL https://raw.githubusercontent.com/AdguardTeam/AdGuardSDNSFilter/master/Filters/exclusions.txt -o Filters/exclusions.txt
          curl -sSfL https://raw.githubusercontent.com/AdguardTeam/AdGuardSDNSFilter/master/Filters/exceptions.txt -o Filters/exceptions.txt
          curl -sSfL https://raw.githubusercontent.com/AdguardTeam/AdGuardSDNSFilter/master/Filters/rules.txt -o Filters/rules.txt
          # Yuki2718氏のフィルタも取得
          curl -sSfL https://raw.githubusercontent.com/Yuki2718/adblock2/main/japanese/dns-unbreak.txt -o Filters/dns-unbreak.txt
           
      # フィルタビルド実行
      - name: Build Filter
        run: |
          # 依存関係を最新にアップグレード
          yarn upgrade
          # 依存関係をインストール
          yarn install
          # コマンドコケたらスクリプト停止
          set -e
          # フィルタビルド実行
          ./node_modules/.bin/hostlist-compiler -c configuration.json -o Filters/main_filter.txt --verbose
          
      # 生成直後のフィルタは一応残す
      - name: Original Filter BackUP
        run: |
          cp Filters/main_filter.txt Filters/before_modify.txt
          
      # クリーンアップ前の異常行を抽出
      - name: Before Bad Filter
        run: |
          awk '
          #コメント行を除外し、フィルタ形式じゃない行を抽出
          !/^!/ && !/^\|\|/ && !/^@@/ {
              if (!seen[$0]++) {
                print
              }
          } ' Filters/main_filter.txt | sort > Filters/before_bad_filter.txt
          
      # クリーンアップ前の異常フィルタを一部修正
      - name: Before Bad Filter modify
        run: |          
          awk '
          # コメント行スキップ
          /^#/ {
            next
          }
          # ". * $ ^" を除いた正規表現を含む行をスキップ
          /[+?(){}\\]/ {
            next
          }
          {
            # 行末の ^ がある場合削除
            sub(/\^+$/, "", $0)
            # 行末が ^ でない場合、^ を追加
            if (!/\^$/) {
              $0 = $0 "^"
            }
          }
          # 先頭"://"を修正
          /^:[/][/]/ {
            sub(/^:[/][/]/, "||")
            print $0
            next
          }
          # 先頭がドットの行を修正
          /^\./ {
            sub(/^\./, "||")
            print $0
            next
          }
          # その他の行
          {
            print "||" $0
          }
          ' Filters/before_bad_filter.txt | sort > Filters/before_bad_filter_fix.txt
          # 修正したフィルタをメインフィルタに追記
          cat Filters/before_bad_filter_fix.txt >> Filters/main_filter.txt

      # フィルタ部分をクリーンアップ
      - name: Filter Clean up
        run: |
          awk '
          #コメント行,正規表現が絡む行を除外し、フィルタ形式の行のみ対象
          !/^!/ && !/\// && (/^\|\|/ || /^@@/) {
            # @@|を@@||に置換
            if ($0 ~ /^@@\|[^|]/) {
              sub(/^@@\|/, "@@||", $0)
            }
            # @@-を@@|| に置換
            if ($0 ~ /^@@-/) {
              sub(/^@@-/, "@@||", $0)
            }
            # ||-を||に変換
            if ($0 ~ /^\|\|-/) {
              sub(/^\|\|-/, "||", $0)
            }
            # $important 以外の修飾子削除
            if ($0 ~ /\$.*$/ && $0 !~ /\$important$/) {
              sub(/\$.*$/, "", $0)
            }
            if (/^@@/) {
              # 行末の | がある場合削除
              sub(/\|+$/, "", $0)
              # 行末が | でない場合、^ を追加
              if (!/\|$/) {
                $0 = $0 "|"
              }
            }
            if (!/^@@/) {
              # 行末の ^ がある場合削除
              sub(/\^+$/, "", $0)
              # 行末が ^ でない場合、^ を追加
              if (!/\^$/) {
                $0 = $0 "^"
              }
            }
            # @@は無条件で許可、それ以外でtracking系ワード含むものは除外
            if ($0 ~ /^@@/ || $0 !~ /tracking|tracker|analytics/) {
              # 重複ではないことを確認
              if (!seen[$0]++) {
                print
              }
            }
          } ' Filters/main_filter.txt | sort > Filters/tmp_body_filter.txt
          
      # ヘッダー部分の作成
      - name: Create Header
        run: |
        
          # 現在の日付と時間をJST形式で取得
          TODAY="$(TZ=Asia/Tokyo date '+%Y-%m-%d %H:%M JST')"

          awk -v ver="! Version: ${TODAY}" '
          # 2~7行目をそのまま書き出す
          NR >= 2 && NR <= 7 {
            # そのまま出力
            print
            # 2行目の後にバージョン情報を挿入
            if (NR == 2) {
              print ver 
            }
          } ' Filters/main_filter.txt > Filters/tmp_head_filter.txt

      # HeaderとBody合成実行
      - name: Complete Create Filter
        run: |
          # 本来このコードはいらないはず
          cat Filters/tmp_head_filter.txt Filters/tmp_body_filter.txt > Filters/main_filter.txt
          rm Filters/tmp*.txt
          
      # 異常フィルタの検出
      - name: Bad Filter Search
        run: |
          awk '
          #コメント行を除外
          !/^!/ {
            # @@||で始まらないフィルタを抽出
            if ($0 !~ /^@@\|\|/ && $0 !~ /^\|\|/) {
              # 重複ではないことを確認
              if (!seen[$0]++) {
                print
              }
            }
          } ' Filters/main_filter.txt > Filters/bad_filter.txt
          
      # 異常フィルタが空の場合、bad_filter.txtを削除
      - name: Remove Empty Bad Filter
        run: |
          # ファイル行数が0の場合、bad_filter.txtを削除
          if [ $(wc -l < Filters/bad_filter.txt) -eq 0 ]; then
            rm Filters/bad_filter.txt
          fi
    
      # フィルタをアップロード
      - name: Upload new filter
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # 処理途中で取得したフィルタの更新確認の為、同時に出力
          git add Filters/*.txt
          git commit -m "chore: update filter (auto-generated by GitHub Actions)"
          git push origin master
